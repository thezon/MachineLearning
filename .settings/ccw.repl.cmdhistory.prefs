cmdhistory=["(defn view-network [sim-res]\\r\\n  (let [sim (read-string sim-res)\\n        sim-counts (map \\r\\n                 (fn[sample] (map \#(apply + % ) sample)) (read-string sim-1))\\n        act-chart (chart/time-series-plot (range 1 (+ observation-time 1)) (repeat observation-time 0) \:title \\"Activations at time\\")  \\r\\n        diff-chart (chart/time-series-plot (range 3 (+ observation-time 3)) (repeat observation-time 0) \:title \\"diff in nodes t vs t+1\\")]\\r\\n    (do\\n      (map \\n        (fn [sample]\\r\\n                     (chart/add-lines act-chart \\n                                      (range 1 (+ observation-time 1))\\n                                      sample)) sim-counts)\\n                      \\n      (incant/view act-chart))))" "(view-network sim-1)" "(defn view-network [sim-res]\\r\\n  (let [sim (read-string sim-res)\\n        sim-counts (map \\r\\n                 (fn[sample] (map \#(apply + % ) sample)) (read-string sim-1))\\n        act-chart (chart/time-series-plot (range 1 (+ observation-time 1)) (repeat observation-time 0) \:title \\"Activations at time\\")  \\r\\n        diff-chart (chart/time-series-plot (range 3 (+ observation-time 3)) (repeat observation-time 0) \:title \\"diff in nodes t vs t+1\\")]\\r\\n    (do\\n      (map \\n        (fn [sample]\\r\\n                     (println sample)) sim-counts)\\n                      \\n      ;(incant/view act-chart)\\n      )))" "(view-network sim-1)" "(defn view-network [sim-res]\\r\\n  (let [sim (read-string sim-res)\\n        sim-counts (map \\r\\n                 (fn[sample] (map \#(apply + % ) sample)) (read-string sim-1))\\n        act-chart (chart/time-series-plot (range 1 (+ observation-time 1)) (repeat observation-time 0) \:title \\"Activations at time\\")  \\r\\n        diff-chart (chart/time-series-plot (range 3 (+ observation-time 3)) (repeat observation-time 0) \:title \\"diff in nodes t vs t+1\\")]\\r\\n    (do\\n      (map \\n        (fn [sample]\\r\\n                     (chart/add-lines act-chart \\n                                      (range 1 (+ (count sample) 1))\\n                                      sample)) sim-counts)\\n                      \\n      (incant/view act-chart))))" "(view-network sim-1)" "(defn view-network [sim-res]\\r\\n  (let [sim (read-string sim-res)\\n        sim-counts (map \\r\\n                 (fn[sample] (map \#(apply + % ) sample)) (read-string sim-1))\\n        act-chart (chart/time-series-plot (range 1 (+ observation-time 1)) (repeat observation-time 0) \:title \\"Activations at time\\")]\\r\\n    (do\\n    (map \\n      (fn [sample]\\r\\n                     (chart/add-lines act-chart \\n                                    (range 1 (+ (count sample) 1))\\n                                    sample)) sim-counts)\\n                      \\n    (incant/view act-chart))))" "(view-network sim-1)" "(defn view-network [sim-res]\\r\\n  (let [sim (read-string sim-res)\\n        sim-counts (map \\r\\n                 (fn[sample] (map \#(apply + % ) sample)) (read-string sim-1))\\n        act-chart (chart/time-series-plot (range 1 (+ observation-time 1)) (repeat observation-time 0) \:title \\"Activations at time\\")]\\r\\n    (do\\n      (map \\n        (fn [sample]\\r\\n          (chart/add-lines act-chart \\n                           (range 1 (+ (count sample) 1))\\n                           (repeat (count sample) -5))) sim-counts)\\n      \\n      (incant/view act-chart))))" "(view-network sim-1)" "(defn view-network [sim-res]\\r\\n  (let [sim (read-string sim-res)\\n        sim-counts (map \\r\\n                 (fn[sample] (map \#(apply + % ) sample)) (read-string sim-1))\\n        act-chart (chart/time-series-plot (range 1 (+ observation-time 1)) (repeat observation-time 0) \:title \\"Activations at time\\")]\\r\\n    (do\\n      (map \\n        (fn [sample]\\r\\n          (chart/add-lines act-chart \\n                           (range 1 (+ (count sample) 1))\\n                           (repeatedly (count sample) (rand))) sim-counts)\\n      \\n      (incant/view act-chart))))" "(defn view-network [sim-res]\\r\\n  (let [sim (read-string sim-res)\\n        sim-counts (map \\r\\n                 (fn[sample] (map \#(apply + % ) sample)) (read-string sim-1))\\n        act-chart (chart/time-series-plot (range 1 (+ observation-time 1)) (repeat observation-time 0) \:title \\"Activations at time\\")]\\n      (loop [sim-counts sim-res] \\n        (if (empty? sim-counts)\\n          (incant/view act-chart)\\n          (do\\n            (chart/add-lines act-chart \\n                             (range 1 (+ (count (first sim-counts) 1))) (first sim-counts))\\n            (recur (rest sim-counts)))))))" "(defn view-network [sim-res]\\r\\n  (let [sim (read-string sim-res)\\n        sim-counts (map \\r\\n                 (fn[sample] (map \#(apply + % ) sample)) (read-string sim-1))\\n        act-chart (chart/time-series-plot (range 1 (+ observation-time 1)) (repeat observation-time 0) \:title \\"Activations at time\\")]\\n      (loop [sim-counts sim-res] \\n        (if (empty? sim-counts)\\n          (incant/view act-chart)\\n          (do\\n            (chart/add-lines act-chart \\n                             (range 1 (+ 1 (count (first sim-counts)))) (first sim-counts))\\n            (recur (rest sim-counts)))))))" "(view-network sim-1)" "(defn view-network [sim-res]\\r\\n  (let [sim (read-string sim-res)\\n        sim-counts (map \\r\\n                 (fn[sample] (map \#(apply + % ) sample)) (read-string sim-1))\\n        obs-length (count (first sim-counts))\\n        act-chart (chart/time-series-plot (range 1 (+ observation-time 1)) (repeat observation-time 0) \:title \\"Activations at time\\")]\\n      (loop [sim-counts sim-res] \\n        (if (empty? sim-counts)\\n          (incant/view act-chart)\\n          (do\\n            (chart/add-lines act-chart \\n                             (range 1 (+ 1 obs-length)) (first sim-counts))\\n            (recur (rest sim-counts)))))))" "(view-network sim-1)" "(defn view-network [sim-res]\\r\\n  (let [sim (read-string sim-res)\\n        sim-counts (map \\r\\n                 (fn[sample] (map \#(apply + % ) sample)) (read-string sim-1))\\n        _ (first sim-counts)\\n        obs-length (count (first sim-counts))\\n        act-chart (chart/time-series-plot (range 1 (+ observation-time 1)) (repeat observation-time 0) \:title \\"Activations at time\\")]\\n      (loop [sim-counts sim-res] \\n        (if (empty? sim-counts)\\n          (incant/view act-chart)\\n          (do\\n            (chart/add-lines act-chart \\n                             (range 1 (+ 1 obs-length)) (first sim-counts))\\n            (recur (rest sim-counts)))))))" "(view-network sim-1)" "(defn view-network [sim-res]\\r\\n  (let [sim (read-string sim-res)\\n        sim-counts (map \\r\\n                 (fn[sample] (map \#(apply + % ) sample)) (read-string sim-1))\\n        _ (first sim-counts)\\n        obs-length 41;(count (first sim-counts))\\n        act-chart (chart/time-series-plot (range 1 (+ observation-time 1)) (repeat observation-time 0) \:title \\"Activations at time\\")]\\n      (loop [sim-counts sim-res] \\n        (if (empty? sim-counts)\\n          (incant/view act-chart)\\n          (do\\n            (chart/add-lines act-chart \\n                             (range 1 (+ 1 obs-length)) (first sim-counts))\\n            (recur (rest sim-counts)))))))" "(view-network sim-1)" "(defn view-network [sim-res]\\r\\n  (let [sim (read-string sim-res)\\n        sim-counts (map \\r\\n                 (fn[sample] (map \#(apply + % ) sample)) (read-string sim-1))\\n        _ (first sim-counts)\\n        obs-length 41;(count (first sim-counts))\\n        act-chart (chart/time-series-plot (range 1 (+ observation-time 1)) (repeat observation-time 0) \:title \\"Activations at time\\")]\\n      (loop [sim-counts sim-res] \\n        (if (empty? sim-counts)\\n          (incant/view act-chart)\\n          (do\\n           ; (chart/add-lines act-chart \\n            ;                 (range 1 (+ 1 obs-length)) (first sim-counts))\\n            (recur (rest sim-counts)))))))" "(view-network sim-1)" "(defn view-network [sim-res]\\r\\n  (let [sim (read-string sim-res)\\n        sim-counts (map \\r\\n                 (fn[sample] (map \#(apply + % ) sample)) (read-string sim-1))\\n        _ (first sim-counts)\\n        obs-length 41;(count (first sim-counts))\\n        act-chart (chart/time-series-plot (range 1 (+ observation-time 1)) (repeat observation-time 0) \:title \\"Activations at time\\")]\\n      (loop [sim-counts sim-res] \\n        (if (empty? sim-counts)\\n          nil;(incant/view act-chart)\\n          (do\\n           ; (chart/add-lines act-chart \\n            ;                 (range 1 (+ 1 obs-length)) (first sim-counts))\\n            (recur (rest sim-counts)))))))" "(view-network sim-1)" "(defn view-network [sim-res]\\r\\n  (let [sim (read-string sim-res)\\n        sim-counts (map \\r\\n                 (fn[sample] (map \#(apply + % ) sample)) (read-string sim-1))\\n        obs-length(count (first sim-counts))\\n        act-chart (chart/time-series-plot (range 1 (+ observation-time 1)) (repeat observation-time 0) \:title \\"Activations at time\\")]\\n      (loop [sim-counts sim-res] \\n        (if (empty? sim-counts)\\n          nil;(incant/view act-chart)\\n          (do\\n           ; (chart/add-lines act-chart \\n            ;                 (range 1 (+ 1 obs-length)) (first sim-counts))\\n            (recur (rest sim-counts)))))))" "(view-network sim-1)" "(defn view-network [sim-res]\\r\\n  (let [sim-input (if (string? sim-res \\n                               (read-string sim-res)\\n                               sim-res))\\n        sim-counts (map \\r\\n                     (fn[sample] (map \#(apply + % ) sample)) sim-input)\\n        obs-length (count (first sim-counts))\\n        act-chart (chart/time-series-plot (range 1 (+ observation-time 1)) (repeat observation-time 0) \:title \\"Activations at time\\")]\\n      (loop [sim-t sim-counts] \\n        (if (empty? sim-counts)\\n          nil;(incant/view act-chart)\\n          (do\\n           ; (chart/add-lines act-chart \\n            ;                 (range 1 (+ 1 obs-length)) (first sim-counts))\\n            (recur (rest sim-counts)))))))" "(view-network sim-1)" "(defn view-network [sim-res]\\r\\n  (let [sim-input (if (string? sim-res \\n                               (read-string sim-res)\\n                               sim-res))\\n        sim-counts (map \\r\\n                     (fn[sample] (map \#(apply + % ) sample)) sim-input)\\n        obs-length (count (first sim-counts))\\n        act-chart (chart/time-series-plot (range 1 (+ observation-time 1)) (repeat observation-time 0) \:title \\"Activations at time\\")]\\n      (loop [sim-t sim-counts] \\n        (if (empty? sim-counts)\\n          nil;(incant/view act-chart)\\n          (do\\n            (chart/add-lines act-chart \\n                             (range 1 (+ 1 obs-length)) (first sim-t))\\n            (recur (rest sim-t)))))))" "(defn view-network [sim-res]\\r\\n  (let [sim-input (if (string? sim-res)\\n                    (read-string sim-res)\\n                    sim-res)\\n        sim-counts (map \\r\\n                     (fn[sample] (map \#(apply + % ) sample)) sim-input)\\n        obs-length (count (first sim-counts))\\n        act-chart (chart/time-series-plot (range 1 (+ observation-time 1)) (repeat observation-time 0) \:title \\"Activations at time\\")]\\n      (loop [sim-t sim-counts] \\n        (if (empty? sim-counts)\\n          nil;(incant/view act-chart)\\n          (do\\n            (chart/add-lines act-chart \\n                             (range 1 (+ 1 obs-length)) (first sim-t))\\n            (recur (rest sim-t)))))))" "(view-network sim-1)" "(defn view-network [sim-res]\\r\\n  (let [sim-input (if (string? sim-res)\\n                    (read-string sim-res)\\n                    sim-res)\\n        sim-counts (map \\r\\n                     (fn[sample] (map \#(apply + % ) sample)) sim-input)\\n        obs-length (count (first sim-counts))\\n        act-chart (chart/time-series-plot (range 1 (+ observation-time 1)) (repeat observation-time 0) \:title \\"Activations at time\\")]\\n      (loop [sim-t sim-counts] \\n        (if (empty? sim-t)\\n          nil;(incant/view act-chart)\\n          (do\\n            (chart/add-lines act-chart \\n                             (range 1 (+ 1 obs-length)) (first sim-t))\\n            (recur (rest sim-t)))))))" "(view-network sim-1)" "(defn view-network [sim-res]\\r\\n  (let [sim-input (if (string? sim-res)\\n                    (read-string sim-res)\\n                    sim-res)\\n        sim-counts (map \\r\\n                     (fn[sample] (map \#(apply + % ) sample)) sim-input)\\n        obs-length (count (first sim-counts))\\n        act-chart (chart/time-series-plot (range 1 (+ observation-time 1)) (repeat observation-time 0) \:title \\"Activations at time\\")]\\n      (loop [sim-t sim-counts] \\n        (if (empty? sim-t)\\n          (incant/view act-chart)\\n          (do\\n            (chart/add-lines act-chart \\n                             (range 1 (+ 1 obs-length)) (first sim-t))\\n            (recur (rest sim-t)))))))" "(view-network sim-1)" "(defn view-sample-counts[sim-res]\\n \\"takes activataion vecs of experiment which is experiment->sample->obervation [[[]]]\\"\\r\\n  (let [sim-input (if (string? sim-res)\\n                  (read-string sim-res)\\n                  sim-res)\\n      sim-counts (map \\r\\n                     (fn[sample] (map \#(apply + % ) sample)) sim-input)\\n      obs-length (count (first sim-counts))\\n      act-chart (chart/time-series-plot (range 1 (+ observation-time 1)) (repeat observation-time 0) \:title \\"Activations at time\\")]\\n  (map  \#(chart/add-lines act-chart (range 1 (+ 1 obs-length)) (first %)) sim-counts))\\n  (incant/view act-chart))" "(defn view-sample-counts[sim-res]\\n  \\"takes activataion vecs of experiment which is experiment->sample->obervation [[[]]]\\"\\r\\n  (let [sim-input (if (string? sim-res)\\n                    (read-string sim-res)\\n                    sim-res)\\n        sim-counts (map \\r\\n                     (fn[sample] (map \#(apply + % ) sample)) sim-input)\\n        obs-length (count (first sim-counts))\\n        act-chart (chart/time-series-plot (range 1 (+ observation-time 1)) (repeat observation-time 0) \:title \\"Activations at time\\")]\\n    (map  \#(chart/add-lines act-chart (range 1 (+ 1 obs-length)) (first %)) sim-counts)\\n    (incant/view act-chart)))" "(view-network sim-1)" "(defn view-sample-counts[experiment-vec]\\r\\n  \\"takes activataion vecs of experiment which is experiment->sample->obervation [[[]]]\\"\\r\\n  (let [experiment-input (if (string? experiment-vec)\\r\\n                           (read-string experiment-vec)\\r\\n                           experiment-vec)\\r\\n        experiment-counts (map \\r\\n                     (fn[sample] (map \#(apply + % ) sample)) experiment-input)\\r\\n        obs-length (count (first experiment-counts))\\r\\n        act-chart (chart/time-series-plot (range 1 (+ obs-length 1)) \\r\\n                                          (repeat obs-length 0) \:title \\"Activations at time\\")]\\r\\n    (map  \#(chart/add-lines act-chart (range 1 (+ 1 obs-length)) (first %)) experiment-counts)\\r\\n    (incant/view act-chart)))" "(view-sample-counts sim-1)" "(defn view-network [sim-res]\\r\\n  (let [sim-input (if (string? sim-res)\\n                    (read-string sim-res)\\n                    sim-res)\\n        sim-counts (map \\r\\n                     (fn[sample] (map \#(apply + % ) sample)) sim-input)\\n        obs-length (count (first sim-counts))\\n        act-chart (chart/time-series-plot (range 1 (+ observation-time 1)) (repeat observation-time 0) \:title \\"Activations at time\\")]\\n      (loop [sim-t sim-counts] \\n        (if (empty? sim-t)\\n          (incant/view act-chart)\\n          (do\\n            (chart/add-lines act-chart \\n                             (range 1 (+ 1 obs-length)) (first sim-t))\\n            (recur (rest sim-t)))))))" "(view-network sim-1)" "(defn view-sample-counts[experiment-vec]\\r\\n  \\"takes activataion vecs of experiment which is experiment->sample->obervation [[[]]]\\"\\r\\n  (let [experiment-input (if (string? experiment-vec)\\r\\n                           (read-string experiment-vec)\\r\\n                           experiment-vec)\\r\\n        experiment-counts (map \\r\\n                     (fn[sample] (map \#(apply + % ) sample)) experiment-input)\\r\\n        obs-length (count (first experiment-counts))\\r\\n        act-chart (chart/time-series-plot (range 1 (+ obs-length 1)) \\r\\n                                          (repeat obs-length 0) \:title \\"Activations at time\\")]\\r\\n    (map  \#(chart/add-lines act-chart (range 1 (+ 1 obs-length)) (first %)) experiment-counts)\\r\\n    (incant/view act-chart)))" "(view-sample-counts sim-1)" "(defn view-sample-counts [sim-res]\\r\\n  (let [sim-input (if (string? sim-res)\\n                    (read-string sim-res)\\n                    sim-res)\\n        sim-counts (map \\r\\n                     (fn[sample] (map \#(apply + % ) sample)) sim-input)\\n        obs-length (count (first sim-counts))\\n        act-chart (chart/time-series-plot (range 1 (+ observation-time 1)) (repeat observation-time 0) \:title \\"Activations at time\\")]\\n      (loop [sim-t sim-counts] \\n        (if (empty? sim-t)\\n          (incant/view act-chart)\\n          (do\\n            (chart/add-lines act-chart \\n                             (range 1 (+ 1 obs-length)) (first sim-t))\\n            (recur (rest sim-t)))))))" "(view-sample-counts sim-1)" "(projectESN.networkTest/view-sample-counts  (slurp \\"sim-net-1.txt\\"))" "(defn view-sample-counts [exper-res]\\r\\n  (let [exper-input (if (string? exper-res)\\r\\n                    (read-string exper-res)\\r\\n                    exper-res)\\r\\n        exper-diff  (map (fn [v] \\r\\n                           (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v)))\\r\\n                         (partition 2 exper-input))\\r\\n        obs-length (count (first exper-counts))\\r\\n        act-chart (chart/time-series-plot (range 3 (+ obs-length  3)) (repeat obs-length  0) \:title \\"Activations at time\\")]\\r\\n      (loop [exper-t exper-diff] \\r\\n        (if (empty? exper-t)\\r\\n          (incant/view act-chart)\\r\\n          (do\\r\\n            (chart/add-lines act-chart \\r\\n                             (range 1 (+ 1 obs-length)) (first exper-t))\\r\\n            (recur (rest exper-t)))))))" "(defn view-sample-counts [exper-res]\\r\\n  (let [exper-input (if (string? exper-res)\\r\\n                    (read-string exper-res)\\r\\n                    exper-res)\\r\\n        exper-diff  (map (fn [v] \\r\\n                           (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v)))\\r\\n                         (partition 2 exper-input))\\r\\n        obs-length (count (first exper-diff))\\r\\n        act-chart (chart/time-series-plot (range 3 (+ obs-length  3)) (repeat obs-length  0) \:title \\"Activations at time\\")]\\r\\n      (loop [exper-t exper-diff] \\r\\n        (if (empty? exper-t)\\r\\n          (incant/view act-chart)\\r\\n          (do\\r\\n            (chart/add-lines act-chart \\r\\n                             (range 1 (+ 1 obs-length)) (first exper-t))\\r\\n            (recur (rest exper-t)))))))" "(projectESN.networkTest/view-sample-counts  (slurp \\"sim-net-1.txt\\"))" "(defn view-sample-counts [exper-res]\\r\\n  (let [exper-input (if (string? exper-res)\\r\\n                    (read-string exper-res)\\r\\n                    exper-res)\\r\\n        exper-diff  (map (fn [v] \\r\\n                           (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v)))\\r\\n                         (partition 2 exper-input))\\r\\n        obs-length (count (first exper-diff))\\r\\n        act-chart (chart/time-series-plot (range 3 (+ obs-length  3)) (repeat obs-length  0) \:title \\"Differences\\")]\\r\\n      (loop [exper-t exper-diff] \\r\\n        (if (empty? exper-t)\\r\\n          (incant/view act-chart)\\r\\n          (do\\r\\n            (chart/add-lines act-chart \\r\\n                             (range 1 (+ 1 obs-length)) (first exper-t))\\r\\n            (recur (rest exper-t)))))))" "(projectESN.networkTest/view-sample-counts  (slurp \\"sim-net-1.txt\\"))" "(projectESN.networkTest/view-diff-counts  (slurp \\"sim-net-1.txt\\"))" "(defn view-sample-diff [exper-res]\\r\\n  (let [exper-input (if (string? exper-res)\\r\\n                    (read-string exper-res)\\r\\n                    exper-res)\\r\\n        exper-diff  (map (fn [v] \\r\\n                           (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v)))\\r\\n                         (partition 2 exper-input))\\r\\n        obs-length (count (first exper-diff))\\r\\n        act-chart (chart/time-series-plot (range 3 (+ obs-length  3)) (repeat obs-length  0) \:title \\"Differences\\")]\\r\\n      (loop [exper-t exper-diff] \\r\\n        (if (empty? exper-t)\\r\\n          (incant/view act-chart)\\r\\n          (do\\r\\n            (chart/add-lines act-chart \\r\\n                             (range 1 (+ 1 obs-length)) (first exper-t))\\r\\n            (recur (rest exper-t)))))))" "(projectESN.networkTest/view-sample-diff  (slurp \\"sim-net-1.txt\\"))" "(defn view-sample-diff [exper-res]\\r\\n  (let [exper-input (if (string? exper-res)\\r\\n                    (read-string exper-res)\\r\\n                    exper-res)\\r\\n        exper-diff  (map (fn [v] \\r\\n                           (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v)))\\r\\n                         (partition 2 exper-input))\\r\\n        obs-length (count (first exper-diff))\\r\\n        act-chart (chart/time-series-plot (range 3 (+ obs-length  3)) (repeat obs-length  0) \:title \\"Differences\\")]\\r\\n      (loop [exper-t exper-diff] \\r\\n        (if (empty? exper-t)\\r\\n          (incant/view act-chart)\\r\\n          (do\\r\\n            (chart/add-lines act-chart \\r\\n                             (range 1 (+ 1 obs-length)) (first exper-t))\\r\\n            (recur (rest exper-t)))))))" "(view-sample-diff  (slurp \\"sim-net-1.txt\\"))" "(defn view-sample-diff [exper-res]\\r\\n  (let [exper-input (if (string? exper-res)\\r\\n                    (read-string exper-res)\\r\\n                    exper-res)\\r\\n        exper-diff  (map\\n                      (fn [in] (map (fn [v] \\r\\n                           (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v)))\\r\\n                         (partition 2 in))) exper-input)\\r\\n        obs-length (count (first exper-diff))\\r\\n        act-chart (chart/time-series-plot (range 3 (+ obs-length  3)) (repeat obs-length  0) \:title \\"Differences\\")]\\r\\n      (loop [exper-t exper-diff] \\r\\n        (if (empty? exper-t)\\r\\n          (incant/view act-chart)\\r\\n          (do\\r\\n            (chart/add-lines act-chart \\r\\n                             (range 1 (+ 1 obs-length)) (first exper-t))\\r\\n            (recur (rest exper-t)))))))" "(view-sample-diff  (slurp \\"sim-net-1.txt\\"))" "(projectESN.networkTest/view-sample-diff  (slurp \\"sim-net-1.txt\\"))" "(defn exper-inter-graph [experiment-vec]\\n  (let [x (range (count (ffirst experiment-vec)))]\\r\\n   (incant/view \\r\\n     (chart/dynamic-scatter-plot [v (range (count (first experiment-vec)))\\r\\n                             l (range (count  experiment-vec))]\\r\\n                            (for [x-index x] [x-index (nth (nth (nth experiment-vec l) v) x-index)])\\r\\n                            \:title \\"Normal PDF Plot\\"))))" "(exper-inter-graph (slurp \\"sim-net-1.txt\\"))" "(defn exper-inter-graph [experiment-vec]\\n  (let [exper-input (if (string? experiment-vec)\\r\\n                      (read-string experiment-vec)\\r\\n                      exper-res)\\n        x (range (count (ffirst exper-input)))]\\r\\n   (incant/view \\r\\n     (chart/dynamic-scatter-plot [v (range (count (first exper-input)))\\r\\n                             l (range (count  exper-input))]\\r\\n                            (for [x-index x] [x-index (nth (nth (nth exper-input l) v) x-index)])\\r\\n                            \:title \\"Normal PDF Plot\\"))))" "(defn exper-inter-graph [experiment-vec]\\n  (let [exper-input (if (string? experiment-vec)\\r\\n                      (read-string experiment-vec)\\r\\n                      exper-input)\\n        x (range (count (ffirst exper-input)))]\\r\\n   (incant/view \\r\\n     (chart/dynamic-scatter-plot [v (range (count (first exper-input)))\\r\\n                             l (range (count  exper-input))]\\r\\n                            (for [x-index x] [x-index (nth (nth (nth exper-input l) v) x-index)])\\r\\n                            \:title \\"Normal PDF Plot\\"))))" "(defn exper-inter-graph [experiment-vec]\\n  (let [exper-input (if (string? experiment-vec)\\r\\n                      (read-string experiment-vec)\\r\\n                      experiment-vec)\\n        x (range (count (ffirst exper-input)))]\\r\\n   (incant/view \\r\\n     (chart/dynamic-scatter-plot [v (range (count (first exper-input)))\\r\\n                             l (range (count  exper-input))]\\r\\n                            (for [x-index x] [x-index (nth (nth (nth exper-input l) v) x-index)])\\r\\n                            \:title \\"Normal PDF Plot\\"))))" "(exper-inter-graph (slurp \\"sim-net-1.txt\\"))" "(projectESN.networkTest/exper-inter-graph (slurp \\"sim-net-1.txt\\"))" "(defn observe-network [reservoir sample]\\r\\n  (net/run-model \\r\\n    observation-time \\r\\n    reservoir\\r\\n    sample))\\r\\n\\r\\n (defn analyze-network[sample-vec reservoir-mat]\\r\\n     (map \#(observe-network reservoir %) sample-vec))" "\\r\\n(defn observe-network [reservoir sample]\\r\\n  (net/run-model \\r\\n    observation-time \\r\\n    reservoir\\r\\n    sample))\\r\\n\\r\\n (defn analyze-network[sample-vec reservoir-mat]\\r\\n     (map \#(observe-network reservoir-mat %) sample-vec))" "(projectESN.networkTest/view-sample-counts (analyze-network 5 (net/createRandNetwork net-size network-connectivity true) ))" "(projectESN.networkTest/view-sample-counts \\n  (analyze-network \\n    (create-rand-reservoir)\\n    (net/createRandNetwork net-size network-connectivity true) ))" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))\\r\\n(def nothing (analyze-network sample network))\\r\\n(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts  experiment)" "(defn create-input-samples [num-samples act-size]\\n  \\"creates a vector of vector samples\\"\\r\\n  (into [] (repeatedly num-samples\\r\\n                       (fn [] (into [] \\r\\n                                    (repeatedly act-size (fn [] (rand-nth [1 0]))))))))" "(projectESN.networkTest/create-input-samples 3 3)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))\\r\\n(def nothing (analyze-network sample network))\\r\\n(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))\\r\\n(def control (analyze-network sample network))\\r\\n(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts control)" "(projectESN.networkTest/view-sample-counts experiment)" "(projectESN.networkTest/exper-inter-graph control)" "(projectESN.networkTest/exper-inter-graph control)\\r\\n(projectESN.networkTest/exper-inter-graph experiment)" "(projectESN.networkTest/view-sample-counts experiment)" "\\r\\n(projectESN.networkTest/exper-inter-graph (slurp \\"sim-net-1.txt\\"))" "(projectESN.networkTest/exper-inter-graph (slurp \\"sim-net-1.txt\\"))\\r\\n(projectESN.networkTest/view-sample-diff  (slurp \\"sim-net-1.txt\\"))\\r\\n(projectESN.networkTest/view-sample-counts  (slurp \\"sim-net-1.txt\\"))" "(projectESN.networkTest/view-sample-counts control)\\r\\n\\r\\n(projectESN.networkTest/view-sample-diff control)" "(require [incanter.stats \:as stats])" "(projectESN.networkTest/view-sample-counts  (slurp \\"sim-net-1.txt\\"))" "\\r\\n(defn exper-counts [experiment-mat]\\r\\n  (map \\r\\n    (fn [sample] (map \#(apply + % ) sample)) experiment-mat))\\r\\n\\r\\n(defn exper-diff [experiment-mat]\\r\\n  (map\\r\\n    (fn [in] (map (fn [v] \\r\\n                    (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v))))" "(defn exper-diff [experiment-mat]\\r\\n  (map\\r\\n    (fn [in] (map (fn [v] \\r\\n                    (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v))))\\r\\n      (partition 2 in))) exper-input)" "(defn exper-diff [experiment-mat]\\r\\n  (map\\r\\n    (fn [in] (map (fn [v] \\r\\n                    (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v))))\\r\\n      (partition 2 in))) experiment-mat)" "(defn exper-counts [experiment-mat]\\r\\n  (map \\r\\n    (fn [sample] (map \#(apply + % ) sample)) experiment-mat))" "(exper-counts experiment)" "(exper-counts (exper-counts experiment))" "(exper-counts control)" "(reduce \#() (exper-counts experiment))" "(+ [1 2 3] [3 4 5])" "(map \#(+ %1 %2) [1 2 3] [3 4 5])" "(reduce (fn[x y] \\n          (map \#(+ %1 %2) x y)) (exper-counts experiment))" "(defn total-counts-per-sample [experiment-mat]\\n  (reduce \\n    (fn[x y] \\n      (map \#(+ %1 %2) x y)) (exper-counts experiment-mat )))" "(total-counts-per-sample experiment)" "(total-counts-per-sample control)" "(apply + (total-counts-per-sample control))" "(let [count (count (apply + (total-counts-per-sample control)))\\n      cont-avg (apply + (total-counts-per-sample control))\\n      exp-avg (apply + (total-counts-per-sample experiment))]\\n  (- count-avg exp-avg))" "(let [count (count (apply + (total-counts-per-sample control)))\\n      cont-avg (apply + (total-counts-per-sample control))\\n      exp-avg (apply + (total-counts-per-sample experiment))]\\n  (- cont-avg exp-avg))" "(let [count (count (total-counts-per-sample control))\\n      cont-avg (apply + (total-counts-per-sample control))\\n      exp-avg (apply + (total-counts-per-sample experiment))]\\n  (- cont-avg exp-avg))" "(incanter.stats/sd [1 2 3 4])" "(let [count (count (total-counts-per-sample control))\\n      count-cont (total-counts-per-sample control)\\n      count-exp (total-counts-per-sample experiment)\\n      cont-avg (apply + count-cont)\\n      exp-avg (apply + count-exp)\\n      cont-dev (incanter.stats/sd count-cont)\\n      exp-dev (incanter.stats/sd count-exp)\\n      dev-avg  (/ (+ exp-dev cont-dev) 2)]\\n  (/ (- cont-avg exp-avg) dev-avg ))" "(let [count (count (total-counts-per-sample control))\\n      count-cont (total-counts-per-sample control)\\n      count-exp (total-counts-per-sample experiment)\\n      cont-avg (apply + count-cont)\\n      exp-avg (apply + count-exp)\\n      cont-dev (incanter.stats/sd count-cont)\\n      exp-dev (incanter.stats/sd count-exp)\\n      dev-avg  (/ (+ exp-dev cont-dev) 2)]\\n  (incanter.stats/t-test \:x count-exp count-cont))\\n  ;(/ (- cont-avg exp-avg) dev-avg ))" "(let [count (count (total-counts-per-sample control))\\n      count-cont (total-counts-per-sample control)\\n      count-exp (total-counts-per-sample experiment)\\n      cont-avg (apply + count-cont)\\n      exp-avg (apply + count-exp)\\n      cont-dev (incanter.stats/sd count-cont)\\n      exp-dev (incanter.stats/sd count-exp)\\n      dev-avg  (/ (+ exp-dev cont-dev) 2)]\\n  (incanter.stats/t-test count-exp \:y count-cont))\\n  ;(/ (- cont-avg exp-avg) dev-avg ))" "(let [count (count (total-counts-per-sample control))\\n      count-cont (total-counts-per-sample control)\\n      count-exp (total-counts-per-sample experiment)\\n      cont-avg (apply + count-cont)\\n      exp-avg (apply + count-exp)\\n      cont-dev (incanter.stats/sd count-cont)\\n      exp-dev (incanter.stats/sd count-exp)\\n      dev-avg  (/ (+ exp-dev cont-dev) 2)]\\n  (incanter.stats/t-test count-cont \:y count-cont))\\n  ;(/ (- cont-avg exp-avg) dev-avg ))" "(let [count (count (total-counts-per-sample control))\\n      count-cont (total-counts-per-sample control)\\n      count-exp (total-counts-per-sample experiment)\\n      cont-avg (apply + count-cont)\\n      exp-avg (apply + count-exp)\\n      cont-dev (incanter.stats/sd count-cont)\\n      exp-dev (incanter.stats/sd count-exp)\\n      dev-avg  (/ (+ exp-dev cont-dev) 2)]\\n  (incanter.stats/t-test count-exp \:y count-cont))\\n  ;(/ (- cont-avg exp-avg) dev-avg ))" "(incanter.stats/t-test (total-counts-per-sample experiment) \:y (total-counts-per-sample control))" " (t-test (total-counts-per-sample control) \\n         (total-counts-per-sample experiment))" " (projectESN.networkTest/t-test (total-counts-per-sample control) \\n         (total-counts-per-sample experiment))" " (projectESN.networkTest/ (total-counts-per-sample control) \\n         (total-counts-per-sample experiment))" " (test/t-test \\r\\n   (test/total-counts-per-sample control) \\r\\n   (test/total-counts-per-sample experiment))" "  (test/t-test \\r\\n   (test/total-diff-per-sample control) \\r\\n   (test/total-diff-per-sample experiment))" " (test/t-test \\r\\n   (test/total-counts-per-sample control) \\r\\n   (test/total-counts-per-sample experiment))" "(defn total-diff-per-sample [experiment-mat]\\r\\n  \\"diff all active neurons for whole sample\\"\\r\\n  (reduce \\r\\n    (fn[x y] \\r\\n      (map \#(+ %1 %2) x y)) (exper-diff experiment-mat )))" "(total-diff-per-sample experiment)" "(total-count-per-sample experiment)" "(total-counts-per-sample experiment)" "(total-diff-per-sample experiment)" "(exper-diff experiment)" "(exper-count experiment)" "(exper-counts experiment)" "(defn exper-diff [experiment-mat]\\r\\n  \\"diff all active neurons for each obeservation of a sample\\"\\r\\n  (map\\r\\n    (fn [in] (map (fn [v] \\r\\n                    (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v))))\\r\\n      (partition 2 in))\\r\\n   experiment-mat ))" "(exper-diff experiment)" "(defn exper-diff [experiment-mat]\\r\\n  \\"diff all active neurons for each obeservation of a sample\\"\\r\\n  (map\\r\\n    (fn [in] (map (fn [v] \\r\\n                    (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v)))\\r\\n                  (partition 2 in))) experiment-mat))" "(exper-diff experiment)" "(defn total-diff-per-sample [experiment-mat]\\r\\n  \\"diff all active neurons for whole sample\\"\\r\\n  (reduce \\r\\n    (fn[x y] \\r\\n      (map \#(+ %1 %2) x y)) (exper-diff experiment-mat )))" "(total-diff-per-sample experiment)" "  (test/t-test \\r\\n   (test/total-diff-per-sample control) \\r\\n   (test/total-diff-per-sample experiment))" "\\r\\n(defn total-diff-per-sample [experiment-mat]\\r\\n  \\"diff all active neurons for whole sample\\"\\r\\n  (reduce \\r\\n    (fn[x y] \\r\\n      (map \#(+ %1 %2) x y)) (exper-diff experiment-mat )))" "  (test/t-test \\r\\n   (total-diff-per-sample control) \\r\\n   (total-diff-per-sample experiment))" "  (test/t-test \\r\\n   (test/total-diff-per-sample control) \\r\\n   (test/total-diff-per-sample experiment))" "\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(defn get-file-datastr [file-name]  \\r\\n    (read-string (slurp file-name)))" "\\r\\n(projectESN.networkTest/view-sample-counts control)\\r\\n(projectESN.networkTest/view-sample-counts experiment)\\r\\n\\r\\n(projectESN.networkTest/view-sample-diff control)\\r\\n(projectESN.networkTest/view-sample-diff experiment)\\r\\n\\r\\n(projectESN.networkTest/exper-inter-graph control)\\r\\n(projectESN.networkTest/exper-inter-graph experiment)" "  \\r\\n(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))\\r\\n(def control (analyze-network sample network))\\r\\n(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))" "(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(projectESN.networkTest/view-sample-counts control)" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))\\r\\n(def control (analyze-network sample network))\\r\\n(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "\\r\\n(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "  \\r\\n(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))\\r\\n(def control (analyze-network sample network))\\r\\n(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def control (analyze-network sample network))" "(projectESN.networkTest/view-sample-counts control)" "(def control (analyze-network sample network))\\r\\n(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts control)\\r\\n(projectESN.networkTest/view-sample-counts experiment)" "(def control (analyze-network sample network))\\r\\n(def experiment (analyze-network sample (train-ESN-reservoir network)))" "\\r\\n(projectESN.networkTest/view-sample-counts control)\\r\\n(projectESN.networkTest/view-sample-counts experiment)" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))" "(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(projectESN.networkTest/view-sample-counts control)" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(spit \\"sim-net-2.txt\\" experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(projectESN.networkTest/view-sample-counts experiment)" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(projectESN.networkTest/view-sample-counts experiment)" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(projectESN.networkTest/view-sample-counts experiment)" "(incanter.stats/square-devs-from-mean experiment)" "(incanter.stats/square-devs-from-mean (test/total-diff-per-sample experiment))" "(incanter.stats/square-devs-from-mean (incanter.stats/square-devs-from-mean (test/total-diff-per-sample experiment)))" "(incanter.stats/square-devs-from-mean (test/total-diff-per-sample control))" "(incanter.stats/square-devs-from-mean (incanter.stats/square-devs-from-mean (test/total-diff-per-sample experiment)))" "(incanter.stats/square-devs-from-mean (test/total-diff-per-sample experiment))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(test/total-diff-per-sample experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(test/total-diff-per-sample experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(test/total-diff-per-sample experiment)" "(/ (apply + (test/total-diff-per-sample experiment)) (* experiment (first" "(count (500 71 64 76 75 79 82 78 80 82 78 80 82 78 80 82 78 80 82 78))" "(count '(500 71 64 76 75 79 82 78 80 82 78 80 82 78 80 82 78 80 82 78))" "(incanter.core/sq (test/total-diff-per-sample experiment))" "(incanter.stats/sd (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(incanter.stats/sd \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(incanter.stats/sd \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(incanter.stats/sd \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(incanter.stats/sd \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(incanter.stats/sd \\r\\n  (test/total-diff-per-sample experiment))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(incanter.stats/sd \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(incanter.stats/sd \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(incanter.stats/sd \\r\\n  (test/total-diff-per-sample experiment))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(incanter.stats/sd \\r\\n  (test/total-diff-per-sample experiment))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(incanter.stats/sd \\r\\n  (test/total-diff-per-sample experiment))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(incanter.stats/sd \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(incanter.stats/sd \\r\\n  (test/total-diff-per-sample experiment))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(incanter.stats/sd \\r\\n  (test/total-diff-per-sample experiment))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(incanter.stats/sd \\r\\n  (test/total-diff-per-sample experiment))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(incanter.stats/sd \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(incanter.stats/sd \\r\\n  (test/total-diff-per-sample experiment))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(incanter.stats/sd \\r\\n  (test/total-diff-per-sample experiment))" "(test/t-test \\r\\n  (test/total-counts-per-sample control) \\r\\n  (test/total-counts-per-sample experiment))\\r\\n\\r\\n(test/t-test \\r\\n  (test/total-diff-per-sample control) \\r\\n  (test/total-diff-per-sample experiment))" "(incanter.stats/sd \\r\\n  (test/total-diff-per-sample experiment) \:mean 0)" "(incanter.stats/sd \\r\\n  (test/total-diff-per-sample experiment)  0)" "(def network (create-rand-reservoir))" "(projectESN.networkTest/view-sample-counts control)\\r\\n(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))" "(projectESN.networkTest/view-sample-counts control)\\r\\n(projectESN.networkTest/view-sample-counts experiment)" "(def observation-time 10)" "(def network (create-rand-reservoir))" ";(projectESN.networkTest/view-sample-counts control)\\r\\n(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))" ";(projectESN.networkTest/view-sample-counts control)\\r\\n(projectESN.networkTest/view-sample-counts experiment)" "(projectESN.networkTest/view-sample-counts control)\\r\\n(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))" "(projectESN.networkTest/view-sample-counts control)\\r\\n(projectESN.networkTest/view-sample-counts experiment)" "(def sim-net-1 (sup/get-file-datastr \\"sim-net-1.txt\\"))" "(projectESN.networkTest/view-sample-counts sim-net-1)" "(def sim-net-1 (sup/get-file-datastr \\"sim-net-1.txt\\"))" "(projectESN.networkTest/view-sample-counts sim-net-1)" "(def network (create-rand-reservoir))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" ";(projectESN.networkTest/view-sample-counts control)\\r\\n(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))\\n(projectESN.networkTest/view-sample-counts experiment)" "(def network  (net/createRandNetwork net-size network-connectivity false))" "(def control (analyze-network sample network))" "(projectESN.networkTest/view-sample-counts control)" "(def network  (net/createRandNetwork net-size network-connectivity false))" "(projectESN.networkTest/view-sample-counts control)" "(def control (analyze-network sample network))" "(projectESN.networkTest/view-sample-counts control)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))\\n(projectESN.networkTest/view-sample-counts experiment)" "(def network  (net/createRandNetwork net-size network-connectivity false))" "(def control (analyze-network sample network))" "(projectESN.networkTest/view-sample-counts control)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))\\n(projectESN.networkTest/view-sample-counts experiment)" "(projectESN.networkTest/view-sample-counts control)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))\\n(projectESN.networkTest/view-sample-counts experiment)" "(projectESN.networkTest/view-sample-counts control)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))\\n(projectESN.networkTest/view-sample-counts experiment)" "(def control (analyze-network sample network))" "(projectESN.networkTest/view-sample-counts control)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))\\n(projectESN.networkTest/view-sample-counts experiment)" "(projectESN.networkTest/view-sample-counts control)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))\\n(projectESN.networkTest/view-sample-counts experiment)" "(+ 1 1)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))\\n(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-diff experiment)" "(projectESN.networkTest/view-sample-diff control)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(projectESN.networkTest/view-sample-diff experiment)" "(projectESN.networkTest/view-sample-diff control)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-diff experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-diff experiment)" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(first experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(first experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(defn adjust-weights [neur-num network act-v learn-rate active?]\\r\\n  \\"adjusts all active links (including itself) by learning raing * weight + weight\\"\\r\\n  (let [result (into []\\r\\n                     (map \#(+ %2 (* %1 %2)) ;changed to perc change \#(+ %1 %2)\\r\\n                          (map \#(* learn-rate %) \\r\\n                               (if active?\\r\\n                                 act-v\\r\\n                                 (map (fn[x] (if (\= x 1) 0 1)) act-v)))\\r\\n                          (nth network neur-num)))\\r\\n        _ (sup/log-run \\"adjust-weights\\" result)]\\r\\n    result))" "(adjust-weights 0 [[1 1][1 1]] [1 1] 0.5 true)" ";-0.1\\r\\n(def lr-AA  -1)\\r\\n;-0.1\\r\\n(def lr-AI -1)\\r\\n;-0.1 ..0.00010\\r\\n(def lr-IA -1)" "(adjust-weights 0 [[1 1][1 1]] [1 1] 0.5 true)" "(adjust-weights 0 [[1 1][1 1]] [1 1] -0.5 true)" "(adjust-weights 0 [[1 1][1 1]] [1 1] -1 true)" "(adjust-weights 0 [[1 1][1 1]] [1 0] -1 true)" "(adjust-weights 0 [[1 1][1 1]] [1 0] -1 false)" "(adjust-weights 0 [[0.5 1][1 1]] [1 0] -1 false)" "(adjust-weights 0 [[0.5 1][1 1]] [1 0] -1 true)" "(adjust-weights 0 [[0.5 1][1 1]] [1 1] -1 true)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def control (analyze-network sample network))" "(projectESN.networkTest/view-sample-counts control)" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def control (analyze-network sample network))" "(projectESN.networkTest/view-sample-counts control)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def control (analyze-network sample network))" "(projectESN.networkTest/view-sample-counts control)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(defn train-network [network act-vec num-cycles impulse?];needs to be named as impress-network\\r\\n  \\"trains network for n cycles. If impluse then activation results is applyed to next cycle \\r\\nOtherwise act vec is impressed on network for num-cycles\\"\\r\\n  \\"Impresses network with a activation vector\\"\\r\\n  (loop [counter 0  new-network network act-vec-in act-vec ]\\r\\n    (if (<\= num-cycles counter)\\r\\n      new-network\\r\\n      (do\\r\\n        (sup/log-run \\"train-network activiation\: \\" \\r\\n                     (net/update-network new-network training-nodes))\\r\\n        (recur (inc counter)\\r\\n               (train-cycle-network network  \\r\\n                                    (if impulse?\\r\\n                                      (net/update-network new-network act-vec-in)\\r\\n                                      act-vec-in )))))))" "(defn train-network [network act-vec num-cycles impulse?];needs to be named as impress-network\\r\\n  \\"trains network for n cycles. If impluse then activation results is applyed to next cycle \\r\\nOtherwise act vec is impressed on network for num-cycles\\"\\r\\n  \\"Impresses network with a activation vector\\"\\r\\n  (loop [counter 0  new-network network act-vec-in act-vec ]\\r\\n    (if (<\= num-cycles counter)\\r\\n      new-network\\r\\n      (do\\r\\n        (sup/log-run \\"train-network activiation\: \\" \\r\\n                     (net/update-network new-network act-vec))\\r\\n        (recur (inc counter)\\r\\n               (train-cycle-network network  \\r\\n                                    (if impulse?\\r\\n                                      (net/update-network new-network act-vec-in)\\r\\n                                      act-vec-in )))))))" "(defn train-network [network act-vec num-cycles impulse?];needs to be named as impress-network\\r\\n  \\"trains network for n cycles. If impluse then activation results is applyed to next cycle \\r\\nOtherwise act vec is impressed on network for num-cycles\\"\\r\\n  \\"Impresses network with a activation vector\\"\\r\\n  (loop [counter 0  new-network network act-vec-in act-vec ]\\r\\n    (if (<\= num-cycles counter)\\r\\n      new-network\\r\\n      (do\\r\\n        (sup/log-run \\"train-network activiation\: \\" \\r\\n                     (net/update-network new-network act-vec))\\r\\n        (recur (inc counter)\\r\\n               (train-cycle-network network  act-vec-in)\\r\\n               (if impulse?\\r\\n                 (net/update-network new-network act-vec-in)\\r\\n                 act-vec-in ))))))" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def control (analyze-network sample network))" "(projectESN.networkTest/view-sample-counts control)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts control)" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(map \#(- %2 0) [1 1] [2 2])" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(defn adjust-weights [neur-num network act-v learn-rate active?]\\r\\n  \\"adjustment to wieghts all active links (including itself) by learning raing * weight + weight\\"\\r\\n  (let [result (into []\\r\\n                     (map \#(* %1 %2));changed to perc change \#(+ %1 %2)\\r\\n                          (map \#(* learn-rate %) \\r\\n                               (if active?\\r\\n                                 act-v\\r\\n                                 (map (fn[x] (if (\= x 1) 0 1)) act-v)))\\r\\n                          (nth network neur-num))\\r\\n        _ (sup/log-run \\"adjust-weights\\" result)]\\r\\n    result))" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def control (analyze-network sample network))" "(projectESN.networkTest/view-sample-counts control)" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def control (analyze-network sample network))" "(projectESN.networkTest/view-sample-counts control)" "(projectESN.networkTest/view-sample-counts experiment)" "(projectESN.networkTest/view-sample-diff control)" "(projectESN.networkTest/view-sample-diff experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(projectESN.networkTest/exper-inter-graph experiment)" "(projectESN.networkTest/view-sample-counts experiment)" "(projectESN.networkTest/view-sample-diff control)" "(projectESN.networkTest/exper-inter-graph experiment)" "(projectESN.networkTest/view-sample-diff experimen" "(projectESN.networkTest/view-sample-diff experiment)" "(projectESN.networkTest/view-sample-counts experiment)" "(projectESN.networkTest/view-sample-diff experiment)" "(projectESN.networkTest/view-sample-diff control)" "(defn exper-diff [experiment-mat]\\r\\n  \\"diff all active neurons for each obeservation of a sample\\"\\r\\n  (map\\r\\n    (fn [in] (map (fn [v] \\r\\n                    (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v)))\\r\\n                  (partition 2 in))) experiment-mat))" "(exper-diff experiment)" "(map \#(partition 5 %) (exper-diff experiment))" "(map \#(map\\n        (fn [x] (appy + x))\\n        partition 5 %) (exper-diff experiment))" "(map \#(map\\n        (fn [x] (apply + x))\\n        partition 5 %) (exper-diff experiment))" "(map \#(map\\n        (fn [x] (apply + x))\\n        (partition 5 %)) (exper-diff experiment))" "(map \\n  (fn [v]\\n    (map\\n      (fn [x] (apply + x))\\n      (partition 5 v)) (exper-diff experiment))" "(map \\n  (fn [v]\\n    (map\\n      (fn [x] (apply + x))\\n      (partition 5 v)) (exper-diff experiment)))" "(map \\n  (fn [v]\\n    (map\\n      (fn [x] (apply + x))\\n      (partition 5 v))) (exper-diff experiment))" "(map \\n  (fn [v]\\n    (map\\n      (fn [x] (apply + x))\\n      (partition 5 v))) (exper-diff control))" "(reduce \#(map (fn [x y] (+ x y)) %1 %2)\\n(map \\n  (fn [v]\\n    (map\\n      (fn [x] (apply + x))\\n      (partition 5 v))) (exper-diff con0trol)))" "(reduce \#(map (fn [x y] (+ x y)) %1 %2)\\n(map \\n  (fn [v]\\n    (map\\n      (fn [x] (apply + x))\\n      (partition 5 v))) (exper-diff conotrol)))" "(reduce \#(map (fn [x y] (+ x y)) %1 %2)\\n(map \\n  (fn [v]\\n    (map\\n      (fn [x] (apply + x))\\n      (partition 5 v))) (exper-diff control)))" "(reduce \#(map (fn [x y] (/ (+ x y) (count %1))) %1 %2)\\n(map \\n  (fn [v]\\n    (map\\n      (fn [x] (apply + x))\\n      (partition 5 v))) (exper-diff control)))" "(reduce \#(map (fn [x y] (float (/ (+ x y) (count %1)))) %1 %2)\\n(map \\n  (fn [v]\\n    (map\\n      (fn [x] (apply + x))\\n      (partition 5 v))) (exper-diff control)))" "(reduce \#(map (fn [x y] (float (/ (+ x y) (count %1)))) %1 %2)\\n(map \\n  (fn [v]\\n    (map\\n      (fn [x] (apply + x))\\n      (partition 5 v))) (exper-diff experiment)))" "(defn diff-counts [bucket-size exper-mat]\\n  (reduce \#(map (fn [x y] (float (/ (+ x y) (count %1)))) %1 %2)\\n          (map \\n            (fn [v]\\n              (map\\n                (fn [x] (apply + x))\\n                (partition bucket-size v))) (exper-diff exper-mat))))" "(defn diff-counts [bucket-size exper-mat]\\r\\n  \\"Gets diff counts of buckets from experement matrix\\"\\r\\n  (reduce \#(map (fn [x y] (float (/ (+ x y) (count %1)))) %1 %2)\\r\\n          (map \\r\\n            (fn [v]\\r\\n              (map\\r\\n                (fn [x] (apply + x))\\r\\n                (partition bucket-size v))) (exper-diff exper-mat))))" "(diff-counts 20 experiment)" "(first experiment)" "(count (first experiment))" "(diff-counts 1 experiment)" "(count (diff-counts 1 experiment))" "(count (diff-counts 2 experiment))" "(count (diff-counts 4 experiment))" "(count (diff-counts 5 experiment))" "(partition 1 [1 1 1 1 1])" "(diff-counts 1 [[1 1 1 1][1 1 1 1]])" "(diff-counts 1 [[[1 1 1 1][1 1 1 1]][1 1 1 1][1 1 1 1]])" "(diff-counts 1 [[[1 1 1 1][1 1 1 1]][[1 1 1 1][1 1 1 1]]])" "(defn diff-counts [bucket-size exper-mat]\\r\\n  \\"Gets diff counts of buckets from experement matrix\\"\\r\\n  (reduce \\r\\n    \#(map \\r\\n       (fn [x y] \\r\\n         (float (+ x y) (count %1))) %1 %2)\\r\\n    (map \\r\\n      (fn [v]\\r\\n        (map\\r\\n          (fn [x] (apply + x))\\r\\n          (partition bucket-size v))) (exper-diff exper-mat))))" "(defn diff-counts [bucket-size exper-mat]\\r\\n  \\"Gets diff counts of buckets from experement matrix\\"\\r\\n  (reduce \\r\\n    \#(map \\r\\n       (fn [x y] \\r\\n         (float (+ x y))) %1 %2)\\r\\n    (map \\r\\n      (fn [v]\\r\\n        (map\\r\\n          (fn [x] (apply + x))\\r\\n          (partition bucket-size v))) (exper-diff exper-mat))))" "(diff-counts 20 experiment)" "(defn diff-counts [bucket-size exper-mat]\\r\\n  \\"Gets diff counts of buckets from experement matrix\\"\\r\\n    (map \\r\\n      (fn [v]\\r\\n        (map\\r\\n          (fn [x] (apply + x))\\r\\n          (partition bucket-size v))) (exper-diff exper-mat)))" "(diff-counts 20 experiment)" "(defn diff-counts [bucket-size exper-mat]\\r\\n  \\"Gets diff counts of buckets from experement matrix\\"\\r\\n          (fn [x] (apply + x))\\r\\n          (partition bucket-size v))" "(defn diff-counts [bucket-size exper-mat]\\r\\n  \\"Gets diff counts of buckets from experement matrix\\"\\r\\n    (map \\r\\n      (fn [v]\\r\\n          (partition bucket-size v))) (exper-diff exper-mat))" "(diff-counts 20 experiment)" "(count (diff-counts 20 experiment))" "(count (first (diff-counts 20 experiment)))" "(exper-diff [[[1 1 1][2 2 2]][[1 1 1][2 2 2]]])" "(exper-diff [[[1 1 1][0 0 0]][[1 1 1][0 0 1]]])" "(exper-diff [[[1 1 1][0 0 0][1 1 1][0 0 0]][[1 1 1][0 0 1][1 1 1][0 0 0]]])" "(exper-diff [[[1 1 1][0 0 0][1 0 1][0 0 0]][[1 1 1][0 0 1][1 1 1][0 0 0]]])" "(defn exper-diff [experiment-mat]\\r\\n  \\"diff all active neurons for each obeservation of a sample\\"\\n  (interleave\\n    (map\\r\\n      (fn [in] (map (fn [v] \\r\\n                      (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v)))\\r\\n                    (partition 2 in))) experiment-mat)\\r\\n    (map\\r\\n      (fn [in] (map (fn [v] \\r\\n                      (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v)))\\r\\n                    (partition 2 in))) (rest experiment-mat))))" "(exper-diff [[[1 1 1][0 0 0][1 0 1][0 0 0]][[1 1 1][0 0 1][1 1 1][0 0 0]]])" "(defn exper-diff [experiment-mat]\\r\\n  \\"diff all active neurons for each obeservation of a sample\\"\\n  (interleave\\n    (map\\r\\n      (fn [in] (interleave\\n                 (map (fn [v] \\r\\n                      (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v)))\\r\\n                    (partition 2 in))(map (fn [v] \\r\\n                      (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v)))\\r\\n                    (partition 2 (rest in)))\\n                 ) experiment-mat))))" "(exper-diff [[[1 1 1][0 0 0][1 0 1][0 0 0]][[1 1 1][0 0 1][1 1 1][0 0 0]]])" "(defn exper-diff [experiment-mat]\\r\\n  \\"diff all active neurons for each obeservation of a sample\\"\\n  (interleave\\n    (map\\r\\n      (fn [in] (interleave\\n                 (map (fn [v] \\r\\n                      (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v)))\\r\\n                    (partition 2 in))\\n                 (map (fn [v] \\r\\n                      (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v)))\\r\\n                    (partition 2 (rest in)))) experiment-mat))))" "(exper-diff [[[1 1 1][0 0 0][1 0 1][0 0 0]][[1 1 1][0 0 1][1 1 1][0 0 0]]])" "(defn exper-diff [experiment-mat]\\r\\n  \\"diff all active neurons for each obeservation of a sample\\"\\n  (interleave\\n    (map\\r\\n      (fn [in] (interleave\\n                 (map (fn [v] \\r\\n                      (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v)))\\r\\n                    (partition 2 in))\\n                 (map (fn [v] \\r\\n                      (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v)))\\r\\n                    (partition 2 in))) experiment-mat))))" "(exper-diff [[[1 1 1][0 0 0][1 0 1][0 0 0]][[1 1 1][0 0 1][1 1 1][0 0 0]]])" "(defn exper-diff [experiment-mat]\\r\\n  \\"diff all active neurons for each obeservation of a sample\\"\\n    (map\\r\\n      (fn [in] (interleave\\n                 (map (fn [v] \\r\\n                      (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v)))\\r\\n                    (partition 2 in))))))" "(exper-diff [[[1 1 1][0 0 0][1 0 1][0 0 0]][[1 1 1][0 0 1][1 1 1][0 0 0]]])" "(defn exper-diff [experiment-mat]\\r\\n  \\"diff all active neurons for each obeservation of a sample\\"\\r\\n  (map\\r\\n    (fn [in] (map (fn [v] \\r\\n                    (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v)))\\r\\n                  (partition 2 in))) experiment-mat))" "(exper-diff [[[1 1 1][0 0 0][1 0 1][0 0 0]][[1 1 1][0 0 1][1 1 1][0 0 0]]])" "(defn exper-diff [experiment-mat]\\r\\n  \\"diff all active neurons for each obeservation of a sample\\"\\r\\n  (map\\r\\n    (fn [in] (map (fn [v] \\r\\n                    (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v)))\\r\\n                  (partition 2 (rest in)))) experiment-mat))" "(exper-diff [[[1 1 1][0 0 0][1 0 1][0 0 0]][[1 1 1][0 0 1][1 1 1][0 0 0]]])" "(defn exper-diff [experiment-mat]\\r\\n  \\"diff all active neurons for each obeservation of a sample\\"\\r\\n  (map\\r\\n    (fn [in] (map (fn [v] \\r\\n                    (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v)))\\r\\n                  (partition 2 in))) (rest experiment-mat)))" "(exper-diff [[[1 1 1][0 0 0][1 0 1][0 0 0]][[1 1 1][0 0 1][1 1 1][0 0 0]]])" "exp" "experiment" "(+ 1 1)" "(first experiment)" "(map (fn [run] (count run)) experiment)" "(map (fn [run] \\n       (fn [sample] (count sample)) run) experiment)" "(+ 1 1)" "(count (map \\n         (fn [run] \\n           (fn [sample] (count sample)) run) experiment))" "(map \\n  (fn [run] \\n    (fn [sample] (count sample)) run) experiment)" "(map \\n  (fn [run] \\n    (fn [sample] (first sample)) run) experiment)" "(map (fn [run] (count run)) experiment)" "(ffirst experiment)" "(defn exper-diff [experiment-mat]\\r\\n  \\"diff all active neurons for each obeservation of a sample\\"\\r\\n  (map\\r\\n    (fn [in] (map (fn [v x] \\r\\n                    [(apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v))\\n                    (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) x))])\\r\\n                  (partition 2 in)\\n                  (rest (partition 2 in)))) experiment-mat))" "(exper-diff [[[1 1 1][0 0 0][1 0 1][0 0 0]][[1 1 1][0 0 1][1 1 1][0 0 0]]])" "(exper-diff [[[1 1 1][0 0 0][1 0 1][0 1 0]][[1 1 1][0 0 1][1 1 1][0 0 0]]])" "(defn exper-diff [experiment-mat]\\r\\n  \\"diff all active neurons for each obeservation of a sample\\"\\r\\n  (map\\r\\n    (fn [in] (map (fn [v x] \\r\\n                    [(apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v))\\n                    (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) x))])\\r\\n                  (partition 2 in)\\n                   (partition 2 (rest in))))) experiment-mat)" "(exper-diff [[[1 1 1][0 0 0][1 0 1][0 1 0]][[1 1 1][0 0 1][1 1 1][0 0 0]]])" "(exper-diff [[[1 1 1][0 0 0][1 0 1][0 1 0]][[1 1 1][0 0 1][1 1 1][0 0 0]]])\\\\" "(defn exper-diff [experiment-mat]\\r\\n  \\"diff all active neurons for each obeservation of a sample\\"\\r\\n  (map\\r\\n    (fn [in] (map (fn [v x] \\r\\n                    [(apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v))\\n                    (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) x))])\\r\\n                  (partition 2 in)\\n                  (partition 2 (rest in)))) experiment-mat))" "(exper-diff [[[1 1 1][0 0 0][1 0 1][0 1 0]][[1 1 1][0 0 1][1 1 1][0 0 0]]])\\\\" "(defn exper-diff [experiment-mat]\\r\\n  \\"diff all active neurons for each obeservation of a sample\\"\\r\\n  (map\\r\\n    (fn [in] (map (fn [v x] \\r\\n                    [(apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v))\\n                    (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) x))])\\r\\n                  (partition 2 (butlast in))\\n                  (partition 2 (rest in)))) experiment-mat))" "(exper-diff [[[1 1 1][0 0 0][1 0 1][0 1 0]][[1 1 1][0 0 1][1 1 1][0 0 0]]])" "(exper-diff experiment)" "(defn exper-diff [experiment-mat]\\r\\n  \\"diff all active neurons for each obeservation of a sample\\"\\r\\n  (map\\r\\n    (fn [in] (flatten \\n               (map (fn [v x] \\r\\n                    [(apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v))\\n                      (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) x))])\\r\\n                  (partition 2 (butlast in))\\n                    (partition 2 (rest in))))) experiment-mat))" "(exper-diff experiment)" "(count (exper-diff experiment))" "(count (first (exper-diff experiment)))" "(defn exper-diff [experiment-mat]\\r\\n  \\"diff all active neurons for each obeservation of a sample\\"\\r\\n  (map\\r\\n    (fn [in] (flatten \\n               (map (fn [v x] \\r\\n                    [(apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v))\\n                      (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) x))])\\r\\n                  (partition 2 (butlast in))\\n                    (partition 2 (rest in))))) experiment-mat))" "(exper-diff [[[1 1 1][0 0 0][1 0 1][0 1 0]][[1 1 1][0 0 1][1 1 1][0 0 0]]])" "(exper-diff [[[1 1 1][0 0 0][1 0 1][0 1 0][1 1 1][0 0 0][1 0 1][0 1 0]][[1 1 1][0 0 1][1 1 1][0 0 0][1 1 1][0 0 0][1 0 1][0 1 0]]])" "(exper-diff [[[1 1 1][0 0 0][1 0 1][0 1 (defn diff-counts [bucket-size exper-mat]\\r\\n  \\"Gets diff counts of buckets from experement matrix\\"\\r\\n  (reduce \\r\\n    \#(map \\r\\n       (fn [x y] \\r\\n         (float (/ (+ x y) (count %1)))) %1 %2)\\r\\n    (map \\r\\n      (fn [v]\\r\\n        (map\\r\\n          (fn [x] (apply + x))\\r\\n          (partition bucket-size v))) (exper-diff exper-mat))))0]][[1 1 1][0 0 1][1 1 1][0 0 0]]])" "(diff-counts 5 experiment)" "(count (diff-counts 5 experiment))" "(count (diff-counts 5 control))" "(diff-counts 5 control)" "(diff-counts 20 experiment)" "(exper-diff [[[1 1 1][0 0 0][1 0 1][0 1 (defn diff-counts [bucket-size exper-mat]\\r\\n  \\"Gets diff counts of buckets from experement matrix\\"\\r\\n  (reduce \\r\\n    \#(map \\r\\n       (fn [x y] \\r\\n         (float (/ (+ x y) (count %1)))) %1 %2)\\r\\n    (map \\r\\n      (fn [v]\\r\\n        (map\\r\\n          (fn [x] (apply + x))\\r\\n          (partition bucket-size v))) (exper-diff exper-mat))))0]][[1 1 1][0 0 1][1 1 1][0 0 0]]])" "(exper-diff experiment)" "(diff-counts 20 experiment)" "(defn exper-diff [experiment-mat]\\r\\n  \\"diff all active neurons for each obeservation of a sample\\"\\r\\n  (map\\r\\n    (fn [in] (flatten \\r\\n               (map (fn [v x] \\r\\n                    [(apply + (apply map \#(java.lang.Math/abs (- %1 %2)) v))\\r\\n                      (apply + (apply map \#(java.lang.Math/abs (- %1 %2)) x))])\\r\\n                  (partition 2 (butlast in))\\r\\n                    (partition 2 (rest in))))) experiment-mat))" "(exper-diff experiment)" "(map \#(partition 5 %1)\\n(exper-diff \\n  experiment))" "(map \\n  (fn [x y] (incanter.stats/t-test (into [] x) \:y (into [] y))\\n(map \#(partition 5 %1)\\n(exper-diff \\n  experiment))))" "(map \#(partition 5 %1)\\n(exper-diff \\n  experiment))" "(first (map \#(partition 5 %1)\\n       (exper-diff \\n         experiment)))" "(nth  \\n  (map \#(partition 5 %1)\\n  (exper-diff \\n    experiment))1)" "(map (incanter.stats/t-test %1 \:y %2)\\n       ((nth  \\n        (map \#(partition 5 %1)\\n             (exper-diff \\n               experiment))1))" "(map (incanter.stats/t-test %1 \:y %2)\\n       (nth  \\n       (map \#(partition 5 %1)\\n            (exper-diff \\n              experiment))1))" "(map (fn [x y ] (incanter.stats/t-test x \:y y))\\n       (nth  \\n       (map \#(partition 5 %1)\\n            (exper-diff \\n              experiment))1))" "       (nth  \\r\\n       (map \#(partition 5 %1)\\r\\n            (exper-diff \\r\\n              experiment))1)" "(map (fn [x] (incanter.stats/t-test (first x) \:y (second y)))\\n       (nth  \\n       (map \#(partition 5 %1)\\n            (exper-diff \\n              experiment))1))" "(map (fn [x] (incanter.stats/t-test (first x) \:y (second x)))\\n       (nth  \\n       (map \#(partition 5 %1)\\n            (exper-diff \\n              experiment))1))" "\\n (first      (nth  \\n             (map \#(partition 5 %1)\\n                  (exper-diff \\n                    experiment))1)))" "\\n (first      (nth  \\n             (map \#(partition 5 %1)\\n                  (exper-diff \\n                    experiment))1))" "\\n(nth  \\n  (map \#(partition 5 %1)\\n       (exper-diff \\n         experiment))1)" "\\n(partition 2\\n  (nth  \\n       (map \#(partition 5 %1)\\n            (exper-diff \\n              experiment))1))" "\\n(map (fn[x]\\n       (incanter.stats/t-test (first x) (second x)))\\n     (partition 2\\n         (nth  \\n              (map \#(partition 5 %1)\\n                   (exper-diff \\n                     experiment))1)))" "\\n(map (fn[x]\\n       (incanter.stats/t-test (first x) \:y (second x)))\\n     (partition 2\\n         (nth  \\n              (map \#(partition 5 %1)\\n                   (exper-diff \\n                     experiment))1)))" "\\n(map \#(\:pvalue %)\\n(map (fn[x]\\n       (incanter.stats/t-test (first x) \:y (second x)))\\n     (partition 2\\n         (nth  \\n              (map \#(partition 5 %1)\\n                   (exper-diff \\n                     experiment))1))))" "\\n(map \#(\:p-value %)\\n(map (fn[x]\\n       (incanter.stats/t-test (first x) \:y (second x)))\\n     (partition 2\\n         (nth  \\n              (map \#(partition 5 %1)\\n                   (exper-diff \\n                     experiment))1))))" "\\n(let [list (nth  \\r\\n             (map \#(partition 5 %1)\\r\\n                  (exper-diff \\r\\n                    experiment))1)]\\n(map \#(\:p-value %)\\n     (map (fn[x]\\n            (incanter.stats/t-test (first x) \:y (second x)))\\n          \\n          (flatten [(partition 2\\n                               \\n                    ]))" "(map (fn [x y ] (incanter.stats/t-test x \:y y))\\n       (nth  \\n       (map \#(partition 5 %1)\\n            (exper-diff \\n              experiment))1))" "\\n(map \#(\:pvalue %)\\n(map (fn[x]\\n       (incanter.stats/t-test (first x) \:y (second x)))\\n     (partition 2\\n         (nth  \\n              (map \#(partition 5 %1)\\n                   (exper-diff \\n                     experiment))1))))" "\\n(map \#(\:p-value %)\\n(map (fn[x]\\n       (incanter.stats/t-test (first x) \:y (second x)))\\n     (partition 2\\n         (nth  \\n              (map \#(partition 5 %1)\\n                   (exper-diff \\n                     experiment))1))))" "\\n(map \#(\:p-value %)\\n     (map (fn[x]\\n            (incanter.stats/t-test (first x) \:y (second x)))\\n          (partition 2\\n              (rest (nth  \\n                         (map \#(partition 5 %1)\\n                              (exper-diff \\n                                experiment))1)))))" "(interleave\\n(map \#(\:p-value %)\\n     (map (fn[x]\\n            (incanter.stats/t-test (first x) \:y (second x)))\\n          (partition 2\\n              (rest (nth  \\n                         (map \#(partition 5 %1)\\n                              (exper-diff \\n                                experiment))1)))))\\n(map \#(\:p-value %)\\r\\n     (map (fn[x]\\r\\n            (incanter.stats/t-test (first x) \:y (second x)))\\r\\n          (partition 2\\r\\n              (rest (nth  \\r\\n                         (map \#(partition 5 %1)\\r\\n                              (exper-diff \\r\\n                                experiment))1))))))" "(interleave\\n(map \#(\:p-value %)\\n     (map (fn[x]\\n            (incanter.stats/t-test (first x) \:y (second x)))\\n          (partition 2\\n               (nth  \\n                    (map \#(partition 5 %1)\\n                         (exper-diff \\n                           experiment))1))))\\n(map \#(\:p-value %)\\r\\n     (map (fn[x]\\r\\n            (incanter.stats/t-test (first x) \:y (second x)))\\r\\n          (partition 2\\r\\n              (rest (nth  \\r\\n                         (map \#(partition 5 %1)\\r\\n                              (exper-diff \\r\\n                                experiment))1))))))" "(defn auto-reg-test [exp-matrix sample-num bucket-size]\\n  (interleave\\n    (map \#(\:p-value %)\\n         (map (fn[x]\\n                (incanter.stats/t-test (first x) \:y (second x)))\\n              (partition 2\\n                         (nth  \\n                           (map \#(partition bucket-size %1)\\n                                (exper-diff \\n                                  exp-matrix))sample-num))))\\n    (map \#(\:p-value %)\\r\\n       (map (fn[x]\\r\\n              (incanter.stats/t-test (first x) \:y (second x)))\\r\\n            (partition 2\\r\\n                       (rest (nth  \\r\\n                               (map \#(partition bucket-size %1)\\r\\n                                    (exper-diff \\r\\n                                      experiment))sample-num)))))))" "(auto-reg-test experiment 1 5)" "(interleave [1 2 3] [4 5 6])" "(exper-counts experiment)" "(defn exper-counts-bucket [experiment-mat bucket-size]\\r\\n  \\"counts all active neurons for each obeservation of a sample\\"\\r\\n  (map (fn[x] (partition bucket-size x))\\n  (map \\r\\n    (fn [sample] (map \#(apply + % ) sample)) experiment-mat)))" "(exper-counts-bucket experiment 10)" "(defn compare-exper-counts [experiment-mat control-mat size]\\n  (let [exp-buckets (exper-counts-bucket experiment-mat  size)\\n        count-buckets (exper-counts-bucket control-mat size)]\\n    (map (fn [ex cn] \\n           (map \#(\:p-value (t-test %1 %2)) ex cn))\\n         exp-buckets count-buckets)))" "(defn compare-exper-counts [experiment-mat control-mat size]\\n  (let [exp-buckets (exper-counts-bucket experiment-mat  size)\\n        count-buckets (exper-counts-bucket control-mat size)]\\n    (map (fn [ex cn] \\n           (map \#(\:p-value (projectESN.networkTest/-test %1 %2)) ex cn))\\n         exp-buckets count-buckets)))" "(defn compare-exper-counts [experiment-mat control-mat size]\\n  (let [exp-buckets (exper-counts-bucket experiment-mat  size)\\n        count-buckets (exper-counts-bucket control-mat size)]\\n    (map (fn [ex cn] \\n           (map \#(\:p-value (projectESN.networkTest/t-test %1 %2)) ex cn))\\n         exp-buckets count-buckets)))" "(compare-exper-counts experiment control 5)" "(def control (analyze-network sample network))" "(compare-exper-counts experiment control 5)" "(defn compare-exper-counts [experiment-mat control-mat size]\\r\\n  \\"t test between to experiments returns p-value\\"\\r\\n  (let [exp-buckets (exper-counts-bucket experiment-mat  size)\\r\\n        count-buckets (exper-counts-bucket control-mat size)]\\r\\n    (map (fn [ex cn] \\r\\n           (map \#(\:p-value (projectESN.networkTest/t-test %1 %2)) ex cn))\\r\\n         exp-buckets count-buckets)))" "(exper-counts experiment)" "(defn compare-exper-counts [experiment-mat control-mat size]\\r\\n  \\"t test between to experiments returns p-value\\"\\r\\n  (let [exp-buckets (exper-counts-bucket experiment-mat  size)\\r\\n        count-buckets (exper-counts-bucket control-mat size)]\\r\\n    (map (fn [ex cn] \\r\\n           (map \#(projectESN.networkTest/t-test %1 %2) ex cn))\\r\\n         exp-buckets count-buckets)))" "(ffirst (compare-exper-counts experiment control 5))" "(compare-exper-counts experiment control 5)" "(map \#(replace)\\n (compare-exper-counts experiment control 5))" "(replace [1 2 3 45] 3 2)" "(replace 3 2 [1 2 3 45] )" "(replace [3 2] [1 2 3 45] )" "(map \#(subv (into [] %) 0 5)\\n (compare-exper-counts experiment control 5))" "(map \#(subvec (into [] %) 0 5)\\n (compare-exper-counts experiment control 5))" "(count (map \#(subvec (into [] %) 0 5)\\n        (compare-exper-counts experiment control 5)))" "(count (first (map \#(subvec (into [] %) 0 5)\\n               (compare-exper-counts experiment control 5))))" "(compare-exper-counts experiment control 5)" "(ffirst (compare-exper-counts experiment control 5))" "(nth (compare-exper-counts experiment control 5) 0)" "(nth (nth (compare-exper-counts experiment control 5) 0) 0)" "(nth (nth (compare-exper-counts experiment control 5) 0) 1)" "(nth (nth (compare-exper-counts experiment control 5) 0) 2)" "(nth (nth (compare-exper-counts experiment control 5) 0) 3)" "(map \#(nth %1 %2) (nth (compare-exper-counts experiment control 5) 0) (range 4))" " (nth (compare-exper-counts experiment control 5) 0)" " (nth (nth (compare-exper-counts experiment control 5) 0) 0)" " (map \#(nth %1 %2) (nth (compare-exper-counts experiment control 5) 0) [0 1])" " (map (fn [x y] (nth x y) (nth (compare-exper-counts experiment control 5) 0) [0 1])" " (map (fn [x y] (nth x y)) (nth (compare-exper-counts experiment control 5) 0) [0 1])" " (nth (nth (compare-exper-counts experiment control 5) 0) 0)" " (map (fn [x y] (nth x y)) (compare-exper-counts experiment control 5) [0 1])" " (map (fn [x y] (nth x y)) (compare-exper-counts experiment control 5) [0 0])" " (nth (nth (compare-exper-counts experiment control 5) 0) 0)" " (nth (nth (compare-exper-counts experiment control 5) 1) 0)" " (nth (nth (compare-exper-counts experiment control 5) 1) 1)" "(map \#(nth (nth (compare-exper-counts experiment control 5) 0) %) [0 1 2 3 4])" "\\n(defn get-rand-compare [experiment control sample-size bucket-count bucket-size]\\n  (map \#(nth (nth (compare-exper-counts experiment control bucket-size) bucket-count) %) (range bucket-count)))" "\\n(defn get-rand-compare [experiment control bucket-count bucket-size]\\n  (map \#(nth (nth (compare-exper-counts experiment control bucket-size) bucket-count) %) (range bucket-count)))" "(get-rand-compare experiment control 5 5)" "\\n(defn get-rand-compare [experiment control num-samples num-buckets bucket-size]\\n  (map \#(nth (nth (compare-exper-counts experiment control bucket-size) (rand-int num-samples)) %) (range num-buckets)))" "(get-rand-compare experiment control 5 5)" "(get-rand-compare experiment control 10 5 5)" "\\n(defn get-rand-compare [experiment control num-samples num-buckets bucket-size]\\n  \\"number-samples\: number of samples in exper  num-buckets\: number of buckets sequenctial in time bucket-size\: how many time units per bucket\\"\\n  (map \#(nth (nth (compare-exper-counts experiment control bucket-size) (rand-int num-samples)) %) (range num-buckets)))" "(get-rand-compare experiment control 10 5 5)" "(map \#([(\:p-value %) (\:x-mean %)])(get-rand-compare experiment control 10 5 5)" "(map \#([(\:p-value %) (\:x-mean %)])\\n     (get-rand-compare experiment control 10 5 5))" "(map \#((\:p-value %) (\:x-mean %))\\n     (get-rand-compare experiment control 10 5 5))" "(map \#(vecto (\:p-value %) (\:x-mean %))\\n     (get-rand-compare experiment control 10 5 5))" "(map \#(vector (\:p-value %) (\:x-mean %))\\n     (get-rand-compare experiment control 10 5 5))" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def control (analyze-network sample network))" "(projectESN.networkTest/view-sample-counts control)\\r\\n(projectESN.networkTest/view-sample-counts experiment)" "(map \#([(\:p-value %) (\:x-mean %)])(get-rand-compare experiment control 10 5 5)" "(map \#(vector (\:p-value %) (\:x-mean %))\\n     (get-rand-compare experiment control 10 5 5))" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def control (analyze-network sample network))\\r\\n(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(map \#(vector (\:p-value %) (\:x-mean %))\\n     (get-rand-compare experiment control 10 5 5))" "(def control (analyze-network sample network))\\r\\n(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def control (analyze-network sample network))\\r\\n(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(map \#(vector (\:p-value %) (\:x-mean %))\\n     (get-rand-compare experiment control 10 5 5))" "(def control (analyze-network sample network))\\r\\n(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))" "(def control (analyze-network sample network))\\r\\n(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(map \#(vector (\:p-value %) (\:x-mean %))\\n     (get-rand-compare experiment control 10 5 5))" "(defn auto-reg-diff-ttest [exp-matrix sample-num bucket-size]\\r\\n  \\"performs t test on a sample of some size agains the next contigous (time unit) sample\\"\\r\\n  (interleave\\r\\n    (map \#(\:p-value %)\\r\\n         (map (fn[x]\\r\\n                (incanter.stats/t-test (first x) \:y (second x)))\\r\\n              (partition 2\\r\\n                         (nth  \\r\\n                           (map \#(partition bucket-size %1)\\r\\n                                (exper-diff \\r\\n                                  exp-matrix))sample-num))))" "(defn auto-reg-diff-ttest [exp-matrix sample-num bucket-size]\\r\\n  \\"performs t test on a sample of some size agains the next contigous (time unit) sample\\"\\r\\n  (interleave\\r\\n    (map \#(\:p-value %)\\r\\n         (map (fn[x]\\r\\n                (incanter.stats/t-test (first x) \:y (second x)))\\r\\n              (partition 2\\r\\n                         (nth  \\r\\n                           (map \#(partition bucket-size %1)\\r\\n                                (exper-diff \\r\\n                                  exp-matrix))sample-num))))\\r\\n    (map \#(\:p-value %)\\r\\n         (map (fn[x]\\r\\n                (incanter.stats/t-test (first x) \:y (second x)))\\r\\n              (partition 2\\r\\n                         (rest (nth  \\r\\n                                 (map \#(partition bucket-size %1)\\r\\n                                      (exper-diff \\r\\n                                        experiment))sample-num)))))))" "(auto-reg-test experiment 10 5)" "(auto-reg-test experiment 5\\n               5)" "(defn auto-reg-diff-ttest [exp-matrix sample-num bucket-size]\\r\\n  \\"performs t test on a sample of some size agains the next contigous (time unit) sample\\"\\r\\n  (interleave\\r\\n    (map \#(vector (\:p-value %) (\:x-mean %))\\r\\n         (map (fn[x]\\r\\n                (incanter.stats/t-test (first x) \:y (second x)))\\r\\n              (partition 2\\r\\n                         (nth  \\r\\n                           (map \#(partition bucket-size %1)\\r\\n                                (exper-diff \\r\\n                                  exp-matrix))sample-num))))\\r\\n    (map \#(\:p-value %)\\r\\n         (map (fn[x]\\r\\n                (incanter.stats/t-test (first x) \:y (second x)))\\r\\n              (partition 2\\r\\n                         (rest (nth  \\r\\n                                 (map \#(partition bucket-size %1)\\r\\n                                      (exper-diff \\r\\n                                        experiment))sample-num)))))))" "(auto-reg-test experiment 5\\n               5)" "(defn auto-reg-diff-ttest [exp-matrix sample-num bucket-size]\\r\\n  \\"performs t test on a sample of some size agains the next contigous (time unit) sample\\"\\r\\n  (interleave\\r\\n    (map \#(vector (\:p-value %) (\:x-mean %))\\r\\n         (map (fn[x]\\r\\n                (incanter.stats/t-test (first x) \:y (second x)))\\r\\n              (partition 2\\r\\n                         (nth  \\r\\n                           (map \#(partition bucket-size %1)\\r\\n                                (exper-diff \\r\\n                                  exp-matrix))sample-num))))\\r\\n    (map \#(\:p-value %)\\r\\n         (map (fn[x]\\r\\n                (incanter.stats/t-test (first x) \:y (second x)))\\r\\n              (partition 2\\r\\n                         (rest (nth  \\r\\n                                 (map \#(partition bucket-size %1)\\r\\n                                      (exper-diff \\r\\n                                        experiment))sample-num)))))))" "(auto-reg-diff-ttesttest experiment 5\\n               5)" "(auto-reg-diff-ttest experiment 5\\n               5)" "(auto-reg-diff-ttest experiment 5 5)" "(defn auto-reg-diff-ttest [exp-matrix sample-num bucket-size]\\r\\n  \\"performs t test on a sample of some size agains the next contigous (time unit) sample\\"\\r\\n  (interleave\\r\\n    (map  \#(vector (\:p-value %) (\:x-mean %))\\r\\n         (map (fn[x]\\r\\n                (incanter.stats/t-test (first x) \:y (second x)))\\r\\n              (partition 2\\r\\n                         (nth  \\r\\n                           (map \#(partition bucket-size %1)\\r\\n                                (exper-diff \\r\\n                                  exp-matrix))sample-num))))\\r\\n    (map  \#(vector (\:p-value %) (\:x-mean %))\\r\\n         (map (fn[x]\\r\\n                (incanter.stats/t-test (first x) \:y (second x)))\\r\\n              (partition 2\\r\\n                         (rest (nth  \\r\\n                                 (map \#(partition bucket-size %1)\\r\\n                                      (exper-diff \\r\\n                                        experiment))sample-num)))))))" "(auto-reg-diff-ttest experiment 5 5)" "(first (exper-diff experiment))" "(second (exper-diff experiment))" "(first (exper-diff experiment))" "(first (exper-counts experiment))" "(rand-nth (exper-counts experiment))" "(rand)" "(rand-int 10)" "(rand-int (range 10))" "(rand-nth (range 10))" "(let [f-rand (rand-nth (range 10))\\n      s-rand (rand-nth (remove \#(\= f-rand %) (range 10)))]\\n  [f-rand s-rand])" "(let [f-rand (rand-nth (range 10))\\r\\n      s-rand (rand-nth (remove \#(\= f-rand %) (range 10)))\\r\\n      sample-1 (nth (exper-counts experiment) f-rand)\\n      sample-2 (nth (exper-counts experiment) s-rand)]\\n  (apply - sample-1 sample-2))" "(let [f-rand (rand-nth (range 10))\\r\\n      s-rand (rand-nth (remove \#(\= f-rand %) (range 10)))\\r\\n      sample-1 (nth (exper-counts experiment) f-rand)\\n      sample-2 (nth (exper-counts experiment) s-rand)]\\n  [ sample-1 sample-2])" "(let [f-rand (rand-nth (range 10))\\r\\n      s-rand (rand-nth (remove \#(\= f-rand %) (range 10)))\\r\\n      sample-1 (nth (exper-counts experiment) f-rand)\\n      sample-2 (nth (exper-counts experiment) s-rand)]\\n     (map \#(- %1 %2) sample-1 sample-2))" "(partition 2 (let [f-rand (rand-nth (range 10))\\r\\n         s-rand (rand-nth (remove \#(\= f-rand %) (range 10)))\\r\\n         sample-1 (nth (exper-counts experiment) f-rand)\\r\\n         sample-2 (nth (exper-counts experiment) s-rand)]\\r\\n        (map \#(- %1 %2) sample-1 sample-2)))" "(partition 5 (let [f-rand (rand-nth (range 10))\\r\\n         s-rand (rand-nth (remove \#(\= f-rand %) (range 10)))\\r\\n         sample-1 (nth (exper-counts experiment) f-rand)\\r\\n         sample-2 (nth (exper-counts experiment) s-rand)]\\r\\n        (map \#(- %1 %2) sample-1 sample-2)))" "(map (projectESN.networkTest/t-test %1 %2) (partition 5 (let [f-rand (rand-nth (range 10))\\r\\n            s-rand (rand-nth (remove \#(\= f-rand %) (range 10)))\\r\\n            sample-1 (nth (exper-counts experiment) f-rand)\\r\\n            sample-2 (nth (exper-counts experiment) s-rand)]\\r\\n           (map \#(- %1 %2) sample-1 sample-2))))" "(partition 5 (let [f-rand (rand-nth (range 10))\\r\\n         s-rand (rand-nth (remove \#(\= f-rand %) (range 10)))\\r\\n         sample-1 (nth (exper-counts experiment) f-rand)\\r\\n         sample-2 (nth (exper-counts experiment) s-rand)]\\r\\n        (map \#(- %1 %2) sample-1 sample-2)))" "(map \#(projectESN.networkTest/t-test %1 %2)\\n     (partition 5 (let [f-rand (rand-nth (range 10))\\r\\n                        s-rand (rand-nth (remove \#(\= f-rand %) (range 10)))\\r\\n                        sample-1 (nth (exper-counts experiment) f-rand)\\r\\n                        sample-2 (nth (exper-counts experiment) s-rand)]\\r\\n                    (map \#(- %1 %2) sample-1 sample-2))))" "(partition 5 (let [f-rand (rand-nth (range 10))\\r\\n         s-rand (rand-nth (remove \#(\= f-rand %) (range 10)))\\r\\n         sample-1 (nth (exper-counts experiment) f-rand)\\r\\n         sample-2 (nth (exper-counts experiment) s-rand)]\\r\\n        (map \#(- %1 %2) sample-1 sample-2)))" "(partion 2\\n         (partition 5 (let [f-rand (rand-nth (range 10))\\r\\n         s-rand (rand-nth (remove \#(\= f-rand %) (range 10)))\\r\\n         sample-1 (nth (exper-counts experiment) f-rand)\\r\\n         sample-2 (nth (exper-counts experiment) s-rand)]\\r\\n        (map \#(- %1 %2) sample-1 sample-2))))" "(partition 2\\n         (partition 5 (let [f-rand (rand-nth (range 10))\\r\\n         s-rand (rand-nth (remove \#(\= f-rand %) (range 10)))\\r\\n         sample-1 (nth (exper-counts experiment) f-rand)\\r\\n         sample-2 (nth (exper-counts experiment) s-rand)]\\r\\n        (map \#(- %1 %2) sample-1 sample-2))))" "(map \#(projectESN.networkTest/t-test %1 %2)\\n    (partition 2\\r\\n         (partition 5 (let [f-rand (rand-nth (range 10))\\r\\n         s-rand (rand-nth (remove \#(\= f-rand %) (range 10)))\\r\\n         sample-1 (nth (exper-counts experiment) f-rand)\\r\\n         sample-2 (nth (exper-counts experiment) s-rand)]\\r\\n        (map \#(- %1 %2) sample-1 sample-2)))))" "(map \#(projectESN.networkTest/t-test (first %1) (second %1))\\n    (partition 2\\r\\n         (partition 5 (let [f-rand (rand-nth (range 10))\\r\\n         s-rand (rand-nth (remove \#(\= f-rand %) (range 10)))\\r\\n         sample-1 (nth (exper-counts experiment) f-rand)\\r\\n         sample-2 (nth (exper-counts experiment) s-rand)]\\r\\n        (map \#(- %1 %2) sample-1 sample-2)))))" "(map  \#(vector (\:p-value %) (\:x-mean %))\\n      (map \#(projectESN.networkTest/t-test (first %1) (second %1))\\n    (partition 2\\r\\n         (partition 5 (let [f-rand (rand-nth (range 10))\\r\\n         s-rand (rand-nth (remove \#(\= f-rand %) (range 10)))\\r\\n         sample-1 (nth (exper-counts experiment) f-rand)\\r\\n         sample-2 (nth (exper-counts experiment) s-rand)]\\r\\n        (map \#(- %1 %2) sample-1 sample-2))))))" "(map  \#(vector (\:p-value %) (\:x-mean %))\\n      (map \#(projectESN.networkTest/t-test (first %1) (second %1))\\n    (partition 2\\r\\n         (partition 2 (let [f-rand (rand-nth (range 10))\\r\\n         s-rand (rand-nth (remove \#(\= f-rand %) (range 10)))\\r\\n         sample-1 (nth (exper-counts experiment) f-rand)\\r\\n         sample-2 (nth (exper-counts experiment) s-rand)]\\r\\n        (map \#(- %1 %2) sample-1 sample-2))))))" "(map  \#(vector (\:p-value %) (\:x-mean %))\\n      (map \#(projectESN.networkTest/t-test (first %1) (second %1))\\n    (partition 2\\r\\n         (partition 10 (let [f-rand (rand-nth (range 10))\\r\\n         s-rand (rand-nth (remove \#(\= f-rand %) (range 10)))\\r\\n         sample-1 (nth (exper-counts experiment) f-rand)\\r\\n         sample-2 (nth (exper-counts experiment) s-rand)]\\r\\n        (map \#(- %1 %2) sample-1 sample-2))))))" "(map  \#(vector (\:p-value %) (\:x-mean %))\\n      (map \#(projectESN.networkTest/t-test (first %1) (second %1))\\n    (partition 2\\r\\n         (partition 5 (let [f-rand (rand-nth (range 10))\\r\\n         s-rand (rand-nth (remove \#(\= f-rand %) (range 10)))\\r\\n         sample-1 (nth (exper-counts experiment) f-rand)\\r\\n         sample-2 (nth (exper-counts experiment) s-rand)]\\r\\n        (map \#(- %1 %2) sample-1 sample-2))))))" "(map  \#(vector (\:p-value %) (\:x-mean %))\\n      (map \#(projectESN.networkTest/t-test (first %1) (second %1))\\n    (partition 2\\r\\n         (partition 2 (let [f-rand (rand-nth (range 10))\\r\\n         s-rand (rand-nth (remove \#(\= f-rand %) (range 10)))\\r\\n         sample-1 (nth (exper-counts experiment) f-rand)\\r\\n         sample-2 (nth (exper-counts experiment) s-rand)]\\r\\n        (map \#(- %1 %2) sample-1 sample-2))))))" "(map  \#(vector (\:p-value %) (\:x-mean %))\\n      (map \#(projectESN.networkTest/t-test (first %1) (second %1))\\n    (partition 2\\r\\n         (partition 50 (let [f-rand (rand-nth (range 10))\\r\\n         s-rand (rand-nth (remove \#(\= f-rand %) (range 10)))\\r\\n         sample-1 (nth (exper-counts experiment) f-rand)\\r\\n         sample-2 (nth (exper-counts experiment) s-rand)]\\r\\n        (map \#(- %1 %2) sample-1 sample-2))))))" "(first (exper-counts experiment))" "(second (exper-counts experiment))" "(rand-nth (exper-counts experiment))" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))\\r\\n(def control (analyze-network sample network))\\r\\n(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(rand-nth (exper-counts experiment))" "(incanter.charts/time-series-plot [49 47 51 46 57 53 60 49 54 51 60 49 54 51 60 49 54 51 60 49 \\n                                   54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 \\n                                   60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 \\n                                   51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54])" "(count  [49 47 51 46 57 53 60 49 54 51 60 49 54 51 60 49 54 51 60 49 \\r\\n                                   54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 \\r\\n                                   60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 \\r\\n                                   51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54])" "(incanter.charts/time-series-plot [49 47 51 46 57 53 60 49 54 51 60 49 54 51 60 49 54 51 60 49 \\n                                   54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 \\n                                   60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 \\n                                   51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54])" "(incanter.charts/time-series-plot [49 47 51 46 57 53 60 49 54 51 60 49 54 51 60 49 54 51 60 49 \\n                                   54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 \\n                                   60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 \\n                                   51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54]\\n                                  (range 101))" "(incanter.core/view\\n  (incanter.charts/time-series-plot [49 47 51 46 57 53 60 49 54 51 60 49 54 51 60 49 54 51 60 49 \\n                           54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 \\n                           60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 \\n                           51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54]\\n                          (range 101)))" "(incanter.core/view\\n  (incanter.charts/scatter-plot[49 47 51 46 57 53 60 49 54 51 60 49 54 51 60 49 54 51 60 49 \\n                             54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 \\n                             60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 \\n                             51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54 51 60 49 54]\\n                          (range 101)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))\\r\\n(def control (analyze-network sample network))\\r\\n(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(rand-nth (exper-counts experiment))" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))\\r\\n(def control (analyze-network sample network))\\r\\n(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(rand-nth (exper-counts experiment))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))\\r\\n(def control (analyze-network sample network))\\r\\n(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))\\r\\n(def control (analyze-network sample network))\\r\\n(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))\\r\\n(def control (analyze-network sample network))\\r\\n(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts experiment)" "(projectESN.networkTest/view-sample-counts control)" "(projectESN.networkTest/view-sample-counts experiment)" "(projectESN.networkTest/exper-inter-graph experiment)" "(projectESN.networkTest/view-sample-counts experiment)" "(projectESN.networkTest/view-sample-counts control)" "(projectESN.networkTest/exper-inter-graph experiment)" "(projectESN.networkTest/view-sample-counts experiment)" "(spit \\"sim-net-1.txt\\" experiment)" "(def sim-net-1 (sup/get-file-datastr \\"sim-net-1.txt\\"))" "(projectESN.networkTest/view-sample-counts sim-net-1)" "(projectESN.networkTest/view-sample-counts  (sup/get-file-datastr \\"sim-net-1.txt\\"))" "(spit \\"sim-net-1.txt\\" experiment)" "(spit \\"sim-net-1.txt\\" (str experiment))" "(spit \\"sim-net-1.txt\\" (apply str experiment))" "(projectESN.networkTest/view-sample-counts sim-net-1)" "(spit \\"sim-net-1.txt\\" experiment)" "(spit \\"sim-net-1.txt\\" (sequence experiment)J)" "(spit \\"sim-net-1.txt\\" (sequence experiment))" "(spit \\"sim-net-1.txt\\" (str (sequence experiment)))" "(spit \\"sim-net-1.txt\\" (apply str (sequence experiment)))" "(def control (analyze-network sample network))" "(projectESN.networkTest/view-sample-counts control)" "(+ 1 1)" "  \\r\\n(def network (create-rand-reservoir))\\r\\n(def sample (create-input-samples))\\r\\n(def control (analyze-network sample network))\\r\\n(def experiment (analyze-network sample (train-ESN-reservoir network)))" "(projectESN.networkTest/view-sample-counts control)\\r\\n(projectESN.networkTest/view-sample-counts experiment)"]
eclipse.preferences.version=1
